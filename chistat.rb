
	def arglist(string)
        return string.split(/<(\d+\/\d+)>/)-['']
    end

    def tableise(string)
        list = arglist(string)
        rows = list.join('').split('|')
        return rows.map {|x| x.split(',').map {|y| y.to_i}}
    end


    def pearson(array1,array2)
    	n = array1.count
    	sx = array1.inject(0,:+).to_f
    	sy = array2.inject(0,:+).to_f
    	sxx = array1.map {|x| x.to_f*x}.inject(0,:+) - (sx*sx)/n
    	syy = array2.map {|y| y.to_f*y}.inject(0,:+) - (sy*sy)/n
    	sxy = array1.zip(array2).map {|pair| pair[0]*pair[1]}.inject(0,:+).to_f - (sx*sy)/n	
    	return (sxy/((sxx*syy)**0.5)).to_r
    end

    def pmcc(string)
        table = tableise(string)
        return pearson(table[0],table[1])
    end

    def spearman(string)
        table = tableise(string)
        pairs = table[0].zip(table[1])
        n = pairs.count
        2.times do |i|
	        pairs.sort! {|a,b| a[i] <=> b[i]}
	        j = 0
	        while j < n
		        value = pairs[j][i]
		        k = j
		        while pairs[k] and pairs[k][i] == value
		        	k += 1
		        end
		        m = k - j
		        tiedrank = j + (m+1).to_r/2
		        m.times do |k|
		        	pairs[j + k][i] = tiedrank
		        end
		        j += m
		    end
		end
		a,b = [0,1].map {|x| pairs.map {|y| y[x]}}
		puts "#{a}  #{b}"
		return pearson(a,b)


    end

    def chiexpected(table,pos = nil)
        n_rows = table.count
        n_cols = table[0].count
        row_total = table.map {|x| x.inject(:+)}
        col_total = (0..n_cols-1).map {|x| table.map {|y| y[x]}.inject(:+)}
        total = row_total.inject(:+)
        expected = (0..n_rows-1).map {|x| (0..n_cols-1).map {|y| (row_total[x].to_r * col_total[y])/total}}
        if pos
            return expected[pos[0]][pos[1]]
        else
            return expected
        end
    end


    def chistat(string)
        table = tableise(string)
        n_rows = table.count
        n_cols = table[0].count
        expected = chiexpected(table)
        yatesy = (n_cols == 2 and n_rows == 2) ? 0.5 : 0
        return ((0..n_rows-1).map {|x| (0..n_cols-1).map {|y| ((table[x][y]-expected[x][y]).abs - yatesy)**2/expected[x][y]}.inject(:+)}.inject(:+))
    end

    def chiexp(string)
        list = arglist(string)
        pos = [list[0],list[2]].map {|x| x.to_i - 1}
        list = list [4..-1]
        rows = list.join('').split('|')
        table = rows.map {|x| x.split(',').map {|y| y.to_i}}
        n_rows = table.count
        n_cols = table[0].count
        return chiexpected(table,pos)
    end

    def chicrit(string)
        list = arglist(string)
        dof = list[0].to_i
        ppair = list[2].split("/").map(&:to_i)
        prob = ppair[0].to_r/ppair[1]
        str = "#{[dof,prob]}"
        chihash =  {"1, (9/10)"=>2.706, "1, (19/20)"=>3.841, "1, (39/40)"=>5.024, "1, (99/100)"=>6.635, "1, (199/200)"=>7.879, "2, (9/10)"=>4.605, "2, (19/20)"=>5.991, "2, (39/40)"=>7.378, "2, (99/100)"=>9.21, "2, (199/200)"=>10.597, "3, (9/10)"=>6.251, "3, (19/20)"=>7.815, "3, (39/40)"=>9.348, "3, (99/100)"=>11.345, "3, (199/200)"=>12.838, "4, (9/10)"=>7.779, "4, (19/20)"=>9.488, "4, (39/40)"=>11.143, "4, (99/100)"=>13.277, "4, (199/200)"=>14.86, "5, (9.to_r/10).to_r"=>9.236, "5, (19/20)"=>11.07, "5, (39/40)"=>12.833, "5, (99/100)"=>15.086, "5, (199/200)"=>16.75, "6, (9/10)"=>10.645, "6, (19/20)"=>12.592, "6, (39/40)"=>14.449, "6, (99/100)"=>16.812, "6, (199/200)"=>18.548, "7, (9/10)"=>12.017, "7, (19/20)"=>14.067, "7, (39/40)"=>16.013, "7, (99/100)"=>18.475, "7, (199/200)"=>20.278, "8, (9/10)"=>13.362, "8, (19/20)"=>15.507, "8, (39/40)"=>17.535, "8, (99/100)"=>20.09, "8, (199/200)"=>21.955, "9, (9/10)"=>14.684, "9, (19/20)"=>16.919, "9, (39/40)"=>19.023, "9, (99/100)"=>21.666, "9, (199/200)"=>23.589, "10, (9/10)"=>15.987, "10, (19/20)"=>18.307, "10, (39/40)"=>20.483, "10, (99/100)"=>23.209, "10, (199/200)"=>25.188, "11, (9/10)"=>17.275, "11, (19/20)"=>19.675, "11, (39/40)"=>21.92, "11, (99/100)"=>24.725, "11, (199/200)"=>26.757, "12, (9/10)"=>18.549, "12, (19/20)"=>21.026, "12, (39/40)"=>23.337, "12, (99/100)"=>26.217, "12, (199/200)"=>28.3, "13, (9/10)"=>19.812, "13, (19/20)"=>22.362, "13, (39/40)"=>24.736, "13, (99/100)"=>27.688, "13, (199/200)"=>29.819, "14, (9/10)"=>21.064, "14, (19/20)"=>23.685, "14, (39/40)"=>26.119, "14, (99/100)"=>29.141, "14, (199/200)"=>31.319, "15, (9/10)"=>22.307, "15, (19/20)"=>24.996, "15, (39/40)"=>27.488, "15, (99/100)"=>30.578, "15, (199/200)"=>32.801, "16, (9/10)"=>23.542, "16, (19/20)"=>26.296, "16, (39/40)"=>28.845, "16, (99/100)"=>32.0, "16, (199/200)"=>34.267, "17, (9/10)"=>24.769, "17, (19/20)"=>27.587, "17, (39/40)"=>30.191, "17, (99/100)"=>33.409, "17, (199/200)"=>35.718, "18, (9/10)"=>25.989, "18, (19/20)"=>28.869, "18, (39/40)"=>31.526, "18, (99/100)"=>34.805, "18, (199/200)"=>37.156, "19, (9/10)"=>27.204, "19, (19/20)"=>30.144, "19, (39/40)"=>32.852, "19, (99/100)"=>36.191, "19, (199/200)"=>38.582, "20, (9/10)"=>28.412, "20, (19/20)"=>31.41, "20, (39/40)"=>34.17, "20, (99/100)"=>37.566, "20, (199/200)"=>39.997, "21, (9/10)"=>29.615, "21, (19/20)"=>32.671, "21, (39/40)"=>35.479, "21, (99/100)"=>38.932, "21, (199/200)"=>41.401, "22, (9/10)"=>30.813, "22, (19/20)"=>33.924, "22, (39/40)"=>36.781, "22, (99/100)"=>40.289, "22, (199/200)"=>42.796, "23, (9/10)"=>32.007, "23, (19/20)"=>35.172, "23, (39/40)"=>38.076, "23, (99/100)"=>41.638, "23, (199/200)"=>44.181, "24, (9/10)"=>33.196, "24, (19/20)"=>36.415, "24, (39/40)"=>39.364, "24, (99/100)"=>42.98, "24, (199/200)"=>45.559, "25, (9/10)"=>34.382, "25, (19/20)"=>37.652, "25, (39/40)"=>40.646, "25, (99/100)"=>44.314, "25, (199/200)"=>46.928, "26, (9/10)"=>35.563, "26, (19/20)"=>38.885, "26, (39/40)"=>41.923, "26, (99/100)"=>45.642, "26, (199/200)"=>48.29, "27, (9/10)"=>36.741, "27, (19/20)"=>40.113, "27, (39/40)"=>43.195, "27, (99/100)"=>46.963, "27, (199/200)"=>49.645, "28, (9/10)"=>37.916, "28, (19/20)"=>41.337, "28, (39/40)"=>44.461, "28, (99/100)"=>48.278, "28, (199/200)"=>50.993, "29, (9/10)"=>39.087, "29, (19/20)"=>42.557, "29, (39/40)"=>45.722, "29, (99/100)"=>49.588, "29, (199/200)"=>52.336, "30, (9/10)"=>40.256, "30, (19/20)"=>43.773, "30, (39/40)"=>46.979, "30, (99/100)"=>50.892, "30, (199/200)"=>53.672, "31, (9/10)"=>41.422, "31, (19/20)"=>44.985, "31, (39/40)"=>48.232, "31, (99/100)"=>52.191, "31, (199/200)"=>55.003, "32, (9/10)"=>42.585, "32, (19/20)"=>46.194, "32, (39/40)"=>49.48, "32, (99/100)"=>53.486, "32, (199/200)"=>56.328, "33, (9/10)"=>43.745, "33, (19/20)"=>47.4, "33, (39/40)"=>50.725, "33, (99/100)"=>54.776, "33, (199/200)"=>57.648, "34, (9/10)"=>44.903, "34, (19/20)"=>48.602, "34, (39/40)"=>51.996, "34, (99/100)"=>56.061, "34, (199/200)"=>58.964, "35, (9/10)"=>46.059, "35, (19/20)"=>49.802, "35, (39/40)"=>53.203, "35, (99/100)"=>57.342, "35, (199/200)"=>60.275, "36, (9/10)"=>47.212, "36, (19/20)"=>50.998, "36, (39/40)"=>54.437, "36, (99/100)"=>58.619, "36, (199/200)"=>61.581, "37, (9/10)"=>48.363, "37, (19/20)"=>52.192, "37, (39/40)"=>55.668, "37, (99/100)"=>59.892, "37, (199/200)"=>62.883, "38, (9/10)"=>49.513, "38, (19/20)"=>53.384, "38, (39/40)"=>56.896, "38, (99/100)"=>61.162, "38, (199/200)"=>64.181, "39, (9/10)"=>50.66, "39, (19/20)"=>54.572, "39, (39/40)"=>58.12, "39, (99/100)"=>62.428, "39, (199/200)"=>65.476, "40, (9/10)"=>51.805, "40, (19/20)"=>55.758, "40, (39/40)"=>59.342, "40, (99/100)"=>63.691, "40, (199/200)"=>66.766, "45, (9/10)"=>57.505, "45, (19/20)"=>61.656, "45, (39/40)"=>65.41, "45, (99/100)"=>69.957, "45, (199/200)"=>73.166, "50, (9/10)"=>63.167, "50, (19/20)"=>67.505, "50, (39/40)"=>71.42, "50, (99/100)"=>76.154, "50, (199/200)"=>79.49, "55, (9/10)"=>68.796, "55, (19/20)"=>73.311, "55, (39/40)"=>77.38, "55, (99/100)"=>82.292, "55, (199/200)"=>85.749, "60, (9/10)"=>74.397, "60, (19/20)"=>79.082, "60, (39/40)"=>83.298, "60, (99/100)"=>88.379, "60, (199/200)"=>91.952, "65, (9/10)"=>79.973, "65, (19/20)"=>84.821, "65, (39/40)"=>89.177, "65, (99/100)"=>94.422, "65, (199/200)"=>98.105, "70, (9/10)"=>85.527, "70, (19/20)"=>90.531, "70, (39/40)"=>95.023, "70, (99/100)"=>100.425, "70, (199/200)"=>104.215, "75, (9/10)"=>91.061, "75, (19/20)"=>96.217, "75, (39/40)"=>100.839, "75, (99/100)"=>106.393, "75, (199/200)"=>110.286, "80, (9/10)"=>96.578, "80, (19/20)"=>101.879, "80, (39/40)"=>106.629, "80, (99/100)"=>112.329, "80, (199/200)"=>116.321, "85, (9/10)"=>102.079, "85, (19/20)"=>107.522, "85, (39/40)"=>112.393, "85, (99/100)"=>118.236, "85, (199/200)"=>122.325, "90, (9/10)"=>107.565, "90, (19/20)"=>113.145, "90, (39/40)"=>118.136, "90, (99/100)"=>124.116, "90, (199/200)"=>128.299, "95, (9/10)"=>113.038, "95, (19/20)"=>118.752, "95, (39/40)"=>123.858, "95, (99/100)"=>129.973, "95, (199/200)"=>134.247, "100, (9/10)"=>118.498, "100, (19/20)"=>124.342, "100, (39/40)"=>129.561, "100, (99/100)"=>135.807, "100, (199/200)"=>140.169}
        return chihash[str[1..-2]]
    end



puts spearman("<20/1>,<20/1>,<13/1>|<10/1>,<19/1>,<18/1>").to_f
puts pmcc("<5/2>,<5/2/1>,<1/1>|<1/1>,<3/1>,<2/1>").to_f
puts pearson([2.5, 1.0, 2.5] , [1.0, 2.0, 3.0])
puts pearson([27,15,19,17,31,13,17,21] , [51,35,38,29,62,29,18,39]).to_f

